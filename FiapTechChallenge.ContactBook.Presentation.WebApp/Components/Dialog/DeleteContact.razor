@using FiapTechChallenge.ContactBook.Application.DTOs.Entities
@using FiapTechChallenge.ContactBook.Presentation.WebApp.Services
@inject ContactsHttpClient ContactsClient
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1" />
            Delete contact?
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@contact" OnValidSubmit="DeleteContactAsync">
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="@contact.Name" Label="Name" ReadOnly="true" />
                    <MudTextField @bind-Value="@contact.Email" Label="Email" ReadOnly="true" />
                    <MudTextField @bind-Value="@contact.Phone" Label="Phone" ReadOnly="true" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Delete</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ResponseContactDto contact { get; set; } = new ResponseContactDto();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task DeleteContactAsync()
    {
        try
        {
            await ContactsClient.DeleteContactAsync(contact.Id);
            Snackbar.Add("Contact Deleted!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(contact.Name));
        }
        catch
        {
            Snackbar.Add("Delete contact problem!", Severity.Error);
        }
    }
}