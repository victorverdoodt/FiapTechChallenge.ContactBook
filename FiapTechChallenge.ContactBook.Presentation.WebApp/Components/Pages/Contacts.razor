@page "/contacts"
@rendermode InteractiveServer
@using FiapTechChallenge.ContactBook.Application.DTOs.Contracts
@using FiapTechChallenge.ContactBook.Application.DTOs.Entities
@using FiapTechChallenge.ContactBook.Domain.Core.Models.Default
@using FiapTechChallenge.ContactBook.Presentation.WebApp.Components.Dialog
@using FiapTechChallenge.ContactBook.Presentation.WebApp.Services

@inject ContactsHttpClient ContactsClient
@inject MessageHttpClient MessagesClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h6">Contact List</MudText>

    <MudGrid>
        <MudItem xs="12" md="4">
            <MudSelect T="int?" Label="Select Region" Dense="true" ValueChanged="OnRegionChangeAsync">
                <MudSelectItem T="int?" Value="null">All Regions</MudSelectItem>
                @if (regions != null)
                {
                    @foreach (var region in regions.Data)
                    {
                        <MudSelectItem T="int?" Value="region.Id" @key="region.Id">@region.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudSelect T="int?" Label="Select DDD" Dense="true" ValueChanged="OnDDDChangeAsync">
                <MudSelectItem T="int?" Value="null">All DDDs</MudSelectItem>
                @if (ddds != null)
                {
                    @foreach (var ddd in ddds.Data)
                    {
                        <MudSelectItem T="int?" Value="ddd.Id" @key="ddd.Id">@ddd.Code</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="4" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddContactAsync">Add New Contact</MudButton>
        </MudItem>
    </MudGrid>

    <MudTable Items="contacts" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone</MudTh>
            <MudTh>Region</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd DataLabel="Region">@context.RegionName</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@((e)=> EditContactAsync(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@((e)=> DeleteContactAsync(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Info" OnClick="@((e)=> SendMessageAsync(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudGrid Class="mt-4">
        <MudItem xs="12" class="d-flex justify-center">
            <MudPagination @bind-Count="@pagesCount" SelectedChanged="OnPageChangeAsync" />
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private IEnumerable<ResponseContactDto> contacts;
    private Response<IEnumerable<ResponseRegionDto>> regions;
    private Response<IEnumerable<ResponseDDDDto>> ddds;
    private int? selectedRegionId;
    private int? selectedDDDId;
    private int currentPage = 1;
    private int pageSize = 10;
    private int pagesCount;
    private int totalItems;

    protected override async Task OnInitializedAsync()
    {
        await LoadRegionsAsync();
        await LoadContactsAsync();
        await LoadDDDsAsync();
    }

    private async Task LoadRegionsAsync()
    {
        regions = await ContactsClient.GetRegionsAsync();
        StateHasChanged();
    }

    private async Task LoadDDDsAsync()
    {
        ddds = await ContactsClient.GetDDDsAsync();
        StateHasChanged();
    }

    private async Task LoadContactsAsync()
    {
        var dto = new FindContactsByRegionDTO
            {
                RegionId = selectedRegionId,
                DDDId = selectedDDDId,
                Take = pageSize,
                Page = currentPage
            };

        var response = await ContactsClient.GetContactsAsync(dto);
        contacts = response.Data?.ToList();
        pagesCount = (int)Math.Ceiling((double)response.Total / pageSize);
        totalItems = response.Total;
        StateHasChanged();
    }

    private async Task OnRegionChangeAsync(int? newRegionId)
    {
        selectedRegionId = newRegionId;
        currentPage = 1;
        await LoadContactsAsync();
    }

    private async Task OnDDDChangeAsync(int? newDDDId)
    {
        selectedDDDId = newDDDId;
        currentPage = 1;
        await LoadContactsAsync();
    }

    private async Task OnPageChangeAsync(int page)
    {
        currentPage = page;
        await LoadContactsAsync();
    }

    private async Task AddContactAsync()
    {
        var dialog = await DialogService.ShowAsync<CreateContact>("Create Contact");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadContactsAsync();
        }
    }

    private async Task EditContactAsync(ResponseContactDto contact)
    {
        var update = new UpdateContactDto { Id = contact.Id, Email = contact.Email, Name = contact.Name, Phone = contact.Phone };
        var parameters = new DialogParameters<EditContact> { { x => x.contact, update } };
        var dialog = await DialogService.ShowAsync<EditContact>("Edit Contact", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadContactsAsync();
        }
    }

    private async Task DeleteContactAsync(ResponseContactDto contact)
    {
        var parameters = new DialogParameters<DeleteContact> { { x => x.contact, contact } };
        var dialog = await DialogService.ShowAsync<DeleteContact>("Delete Contact", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadContactsAsync();
        }
    }

    private async Task SendMessageAsync(ResponseContactDto contact)
    {
        var parameters = new DialogParameters<SendMessage> { { x => x.Contact, contact } };
        var dialog = await DialogService.ShowAsync<SendMessage>("Send Message", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Lógica para enviar mensagem ao contato
            await MessagesClient.PostMessageAsync((MessageContractDto)result.Data);
            Snackbar.Add($"Message sent to {contact.Name}!", Severity.Success);
        }
    }

}
